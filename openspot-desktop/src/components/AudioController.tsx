// src/components/AudioController.tsx

import React, { useEffect, useRef, useState } from 'react';
import { useMusic } from '../contexts/MusicContext';
import {apiService} from "../lib/apiService";

// 1. –£–±–∏—Ä–∞–µ–º –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç API. –¢–µ–ø–µ—Ä—å –≤—Å—è —Å–µ—Ç–µ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤ main-–ø—Ä–æ—Ü–µ—Å—Å–µ.
// import { getStreamUrl } from '../lib/music-api';

const AudioController: React.FC = () => {
  const { state, dispatch } = useMusic();
  const audioRef = useRef<HTMLAudioElement>(null);
  const [streamUrl, setStreamUrl] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);

  // 2. [–ò–ó–ú–ï–ù–ï–ù–û] –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ electronAPI
  useEffect(() => {
    const fetchStream = async () => {
      if (state.currentTrack) {
        setError(null);
        setStreamUrl(null);
        try {
          // [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ–º URL. apiService —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –æ—à–∏–±–∫–∏.
          const url = await apiService.getStreamUrl(state.currentTrack.id);
          setStreamUrl(url || null);
        } catch (err: any) {
          console.error('Failed to load stream:', err);
          setError('Failed to load stream.');
          setStreamUrl(null);
        }
      } else {
        setStreamUrl(null);
      }
    };
    fetchStream();
  }, [state.currentTrack]);
  // 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è <audio> —ç–ª–µ–º–µ–Ω—Ç–∞, –∫–æ–≥–¥–∞ streamUrl –∏–∑–º–µ–Ω–∏–ª—Å—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    if (streamUrl) {
      console.log('üéµ Setting new stream URL for direct playback');
      audio.src = streamUrl;
      audio.load(); // –ì–æ–≤–æ—Ä–∏–º —ç–ª–µ–º–µ–Ω—Ç—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
    } else {
      audio.src = ''; // –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫, –µ—Å–ª–∏ URL –ø—É—Å—Ç
    }
  }, [streamUrl]); // –≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç streamUrl

  // 4. –£–ø—Ä–∞–≤–ª—è–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º/–ø–∞—É–∑–æ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    if (state.isPlaying) {
      if (audio.src) {
        audio.play().catch(err => console.error('Play failed:', err));
      }
    } else {
      audio.pause();
    }
  }, [state.isPlaying]);

  // 5. –ì—Ä–æ–º–∫–æ—Å—Ç—å –∏ –ø–µ—Ä–µ–º–æ—Ç–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  useEffect(() => {
    const audio = audioRef.current;
    if (audio) audio.volume = state.volume;
  }, [state.volume]);

  useEffect(() => {
    const audio = audioRef.current;
    if (audio && Math.abs(audio.currentTime - state.currentTime) > 1) {
      audio.currentTime = state.currentTime;
    }
  }, [state.currentTime]);

  // 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π <audio> –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const updateTime = () => dispatch({ type: 'SET_CURRENT_TIME', payload: audio.currentTime });
    const updateDuration = () => {
      if (audio.duration && isFinite(audio.duration)) {
        dispatch({ type: 'SET_DURATION', payload: audio.duration });
      }
    };

    const onEnded = () => {
      if (state.repeatMode === 'track') {
        audio.currentTime = 0;
        audio.play().catch(err => console.error('Replay failed:', err));
      } else {
        dispatch({ type: 'NEXT_TRACK' });
      }
    };

    const onError = (e: Event) => {
      console.error('Audio element error:', e);
      setError('Audio playback error.');
    };

    audio.addEventListener('timeupdate', updateTime);
    audio.addEventListener('loadedmetadata', updateDuration);
    audio.addEventListener('ended', onEnded);
    audio.addEventListener('error', onError);

    return () => {
      audio.removeEventListener('timeupdate', updateTime);
      audio.removeEventListener('loadedmetadata', updateDuration);
      audio.removeEventListener('ended', onEnded);
      audio.removeEventListener('error', onError);
    };
  }, [dispatch, state.repeatMode]);

  // 7. –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç—Ä–µ–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  useEffect(() => {
    return () => {
      if (audioRef.current) {
        audioRef.current.src = '';
        audioRef.current.load();
        console.log('üéµ AudioController: Track changed, resources cleaned up.');
      }
    };
  }, [state.currentTrack?.id]);

  return <audio ref={audioRef} preload="auto" style={{ display: 'none' }} />;
};

export default AudioController;